generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model users {
  id                  String               @id @default(uuid())
  fullname            String               @db.VarChar
  password            String?              @db.VarChar
  email               String               @unique @db.VarChar
  phone               String?              @db.VarChar
  sex                 Sex                  @default(other)
  avatarUrl           String?              @db.VarChar
  dateOfBirth         DateTime?
  role                Role[]
  status              UserStatus           @default(disable)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  otp                 String?              @unique
  googleId            String?              @unique
  googleAccessToken   String?
  facebookId          String?              @unique
  facebookAccessToken String?
  apiKey              String?              @unique
  booking             booking[]
  cancellation        cancellation[]
  club                club[]
  keyToken            keyTokens?
  memberSubscription  memberSubscription[]
  review              review[]
  staffProfile        staffProfile?
}

model keyTokens {
  id               String   @id @default(uuid())
  userId           String   @unique
  publicKey        String
  privateKey       String
  refreshTokenUsed String[]
  refreshToken     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             users    @relation(fields: [userId], references: [id])
}

model role {
  id   String @id
  name Role
}

model template {
  id       String @id @default(uuid())
  name     String @db.VarChar
  status   String @default("active")
  tem_html String
}

model userRole {
  id     Int    @id @default(autoincrement())
  userId String
}

model staffProfile {
  id        String        @id @default(uuid())
  userId    String     @unique
  clubId    String     @unique
  club      club       @relation(fields: [clubId], references: [id])
  user      users      @relation(fields: [userId], references: [id])
  staffRole staffRole[]
}

model staffRole {
  id           String       @id
  staffId      String          @unique
  clubRoleId   String       @unique
  clubRole     clubRole     @relation(fields: [clubRoleId], references: [id])
  staffProfile staffProfile @relation(fields: [staffId], references: [id])
}

model clubRole {
  id         String      @id
  clubId     String
  roleName   String
  club       club        @relation(fields: [clubId], references: [id])
  permission permission?
  staffRole  staffRole?
}

model permission {
  id         String   @id
  name       String
  clubRoleId String   @unique
  clubRole   clubRole @relation(fields: [clubRoleId], references: [id])
}

model review {
  id           String   @id @default(uuid())
  reviewerId   String
  clubId       String
  content      String   @db.VarChar
  parentId     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  commentLeft  Int      @default(0)
  commentRight Int      @default(0)
  club         club     @relation(fields: [clubId], references: [id])
  user         users    @relation(fields: [reviewerId], references: [id])
}

model cancellation {
  id             String   @id
  canceledSlotId String?
  cancelerId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           users    @relation(fields: [cancelerId], references: [id])
}

model bookedSlot {
  id        String   @id @default(uuid())
  bookingId String
  date      DateTime
  slotId    String
  checkedIn String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking booking @relation(fields: [bookingId], references: [id])
  slot      slot     @relation(fields: [slotId], references: [id])
}

model booking {
  id        String   @id @default(uuid())
  userId    String
  billId    String
  date      DateTime
  status    BookingStatus
  totalPrice Float
  bookedSlot bookedSlot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      users    @relation(fields: [userId], references: [id])
}

model bill {
  id        String     @id @default(uuid())
  method    String
  total     Float
  date      DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    BillStatus
  type      BillType
  memberSubscription memberSubscription?
  clubSubscription clubSubscription?
}

model club {
  id                 String               @id @default(uuid())
  courtOwnerId       String
  name               String               @db.VarChar
  address            String               @db.VarChar
  district           String               @db.VarChar
  cityOfProvince     String               @db.VarChar
  logoUrl            String?              @db.VarChar
  description        String?              @db.VarChar
  apiKey             String               @unique @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               users                @relation(fields: [courtOwnerId], references: [id])
  clubImage          clubImage[]
  clubRole           clubRole[]
  // pricing            pricing[]
  review             review[]
  slot               slot[]
  clubSubscription  clubSubscription?
  staffProfile       staffProfile?
  subOptionMonth     subOptionMonth?
  subOptionTime      subOptionTime?
  subscriptionOption subscriptionOption[]
  court court[]
}

// model pricing {
//   id        String   @id @default(uuid())
//   clubId    String
//   type      String   @db.VarChar
//   duration  String   @db.VarChar
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   club      club     @relation(fields: [clubId], references: [id])
// }

model clubImage {
  id        String   @id @default(uuid())
  clubId    String
  name      String   @db.VarChar
  url       String   @db.VarChar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  club      club     @relation(fields: [clubId], references: [id])
}



model subscriptionOption {
  id                 String                   @id
  clubId             String
  name               String                   @db.VarChar
  price              Float
  totalDate          Int
  type               SubscriptionType
  status             SubscriptionOptionStatus
  detail             Json
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  memberSubscription memberSubscription[]
  club               club                     @relation(fields: [clubId], references: [id])
}



model subOptionMonth {
  id          String                   @id @default(uuid())
  usesPerDay  Int
  playTime    Int
  usesHistory DateTime[]               @default(dbgenerated("(ARRAY[]::timestamp without time zone[])::timestamp(3) without time zone[]"))
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  clubId      String                   @unique
  status      SubscriptionOptionStatus
  club        club                     @relation(fields: [clubId], references: [id])
}

model subOptionTime {
  id         String                   @id @default(uuid())
  totalTime  Int
  timeRemain Int                      @default(0)
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  clubId     String                   @unique
  status     SubscriptionOptionStatus
  club       club                     @relation(fields: [clubId], references: [id])
}

model slot {
  id            String          @id @default(uuid())
  clubId        String
  startTime     DateTime
  endTime       DateTime
  dateOfWeek    Int 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  price Float
  bookedSlot    bookedSlot[]
  club          club            @relation(fields: [clubId], references: [id])
  subOptionSlot subOptionSlot[]
  slotOnCourt slotOnCourt[]
}
model slotOnCourt {
  id String @id @default(uuid())
  slotId String
  courtId String
  status CourtSlotStatus
  slot slot @relation(fields: [slotId], references: [id])
  court court @relation(fields: [courtId], references: [id])
}
model court {
  id        String      @id @default(uuid())
  status    CourtStatus @default(active)
  number    Int
  clubId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  slotOnCourt slotOnCourt[]
  club club @relation(fields: [clubId], references: [id])
}

model subOptionSlot {
  id        String   @id
  slotId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slot      slot     @relation(fields: [slotId], references: [id])
}

model memberSubscription {
  id                 String             @id @default(uuid())
  subscriptionId     String
  memberId           String
  billId             String @unique
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  detail            Json
  status             memberSubscriptionStatus
  bill bill @relation(fields: [billId], references: [id])
  user               users              @relation(fields: [memberId], references: [id])
  subscriptionOption subscriptionOption @relation(fields: [subscriptionId], references: [id])
}

model subscriptionForClub{
  id String @id @default(uuid())
  name String
  price Float
  totalDate Int
  clubSubscription clubSubscription[]
  type SubsciptionForClubType
  status SubcriptionForClubStatus
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model clubSubscription{
  id String @id @default(uuid())
  clubId String @unique
  subscriptionForClubId String 
  billId String @unique
  name String
  price Float
  totalDate Int
  startDate DateTime
  endDate DateTime
  status clubSubscriptionStatus
  club club @relation(fields: [clubId], references: [id])
  bill bill @relation(fields: [billId], references: [id])
  SubscriptionForClub subscriptionForClub @relation(fields: [subscriptionForClubId], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum SubscriptionType {
  Month
  Slot
  Time
}

enum SubsciptionForClubType {
  Day
  Month
  Year
}

enum Sex {
  female
  male
  other
}

enum Role {
  owner
  admin
  staff
  member
}

enum SubscriptionOptionStatus {
  active
  block
  disable
}

enum OtpStatus {
  pending
  active
  block
}

enum UserStatus {
  active
  disable
  block
}

enum CourtStatus {
  active
  repair
  booked
}

enum BillType {
  booking
  memberSubscription
  ownerSubscription
}

enum BillStatus {
  pending
  success
  fail
}

enum memberSubscriptionStatus {
  pending
  active
  disable
}

enum SubcriptionForClubStatus {
  active
  disable
}

enum clubSubscriptionStatus {
  pending
  active
  disable
}

enum CourtSlotStatus {
  available
  disable 
  booked
}

enum BookingStatus {
  pending
  active
  canceled
}

