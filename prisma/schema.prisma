generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
}

model Account {
  id                 String  @id
  user_id            String
  type               String
  provider           String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  providerAccountId  String
  User               User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model dinosaur {
  id              Int     @id @default(autoincrement())
  species         String? @db.VarChar(255)
  img_url         String? @db.VarChar
  avatar_url      String? @db.VarChar
  living_period   String? @db.VarChar(255)
  discovered_year Int?
}

enum Sex {
  female
  male
  other
}

/////////////////////////////////////////////////////////////////////////////

model user {
  id String @id
  username String @db.VarChar()
  password String @db.VarChar()
  email String @db.VarChar()
  phone String @db.VarChar()
  sex Sex
  avatarUrl String? @db.VarChar()
  dateOfBirth DateTime
  club club[]
  review review[]
  memberSubscription memberSubscription[]
  cancellation cancellation[]
  booking booking[]
  //thieu userrole chua add
}

enum Role {
 admin
 staff
 member
}

model role {
  id String @id
  name Role
}

model userRole {
  id Int @id @default(autoincrement())
  userId String 
  
}

model review {
 id String @id
 reviewerId String
 clubId String
 content String @db.VarChar()
 parentId String 
 commentLeft String @db.VarChar()
 commentRight String @db.VarChar()
 user user @relation(fields: [reviewerId], references: [id])
 club club @relation(fields: [clubId], references: [id])
}

model cancellation {
  id String @id
  canceledSlotId String?
  cancelerId String 
  user user @relation(fields: [cancelerId], references: [id])
  //bookedSlot bookedSlot? @relation(fields: [canceledSlotId], references: [id])
}

model bookedSlot {
  id String @id
  bookingId String 
  date DateTime
  slotId String
  checkedIn String
  slot slot @relation(fields: [slotId], references: [id])
  //cancellation cancellation? @relation(fields: [id], references: [canceledSlotId])
}

model booking {
  id String @id
  userId String
  billId String
  date DateTime
  status Boolean
  user user @relation(fields: [userId], references: [id])
  //thieu bookedSlot vs bill can sua
}

model bill {
  id String @id
  method String
  total Float
  date DateTime
  type String @db.VarChar()
  // thieu fk of memberSubscription
}

model club {
  id String @id
  courtOwnerId String
  name String @db.VarChar()
  address String @db.VarChar()
  district String @db.VarChar()
  cityOfProvince String @db.VarChar()
  logoUrl String? @db.VarChar()
  description String? @db.VarChar()
  review review[]
  pricing pricing[]
  clubImage clubImage[]
  court court[]
  subscriptionOption subscriptionOption[]
  slot slot[]
  user user @relation(fields: [courtOwnerId], references: [id])
  //thieu staffrole vs clubrole vs permission
}

model pricing {
  id String @id
  clubId String
  type String @db.VarChar()
  duration String @db.VarChar()
  price Float
  club club @relation(fields: [clubId], references: [id])
}

model clubImage {
  id String @id
  clubId String
  name String @db.VarChar()
  url String @db.VarChar()
  club club @relation(fields: [clubId], references: [id])
}

model court {
  id String @id
  clubId String 
  startTime DateTime
  endTime DateTime
  dateOfWeek DateTime
  club club @relation(fields: [clubId], references: [id])
}

enum SubscriptionOptionStatus {
  block
}
model subscriptionOption {
  id String @id
  clubId String
  name String @db.VarChar()
  price Float
  startDate DateTime
  endDate DateTime
  status SubscriptionOptionStatus
  memberSubscription memberSubscription[]
  subOptionSlot subOptionSlot[]
  club club @relation(fields: [clubId], references: [id])
}

model subOptionSlot{
  id String @id
  subOpId String
  slotId String
  subscriptionOption subscriptionOption @relation(fields: [subOpId], references: [id])
  slot slot @relation(fields: [slotId], references: [id])
}

model slot {
  id String @id
  clubId String
  startTime DateTime
  endTime DateTime
  dateOfWeek DateTime
  subOptionSlot subOptionSlot[]
  bookedSlot bookedSlot[]
  club club @relation(fields: [clubId], references: [id])
}

model memberSubscription {
  id String @id
  subscriptionId String 
  memberId String
  billId String
  user user @relation(fields: [memberId], references: [id])
  subscriptionOption subscriptionOption @relation(fields: [subscriptionId], references: [id])
}
