generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model users {
  id                 String               @id @default(uuid())
  username           String               @db.VarChar
  password           String?               @db.VarChar
  email              String               @db.VarChar @unique
  phone              String?               @db.VarChar
  sex                Sex                  @default(other)
  avatarUrl          String?              @db.VarChar
  dateOfBirth        DateTime?
  role Role[]
  status UserStatus  @default(disable)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  booking            booking[]
  cancellation       cancellation[]
  club               club[]
  memberSubscription memberSubscription[]
  review             review[]
  keyToken keyTokens? 
  otp String? @unique
  googleId           String?              @unique
  googleAccessToken  String?             
  facebookId           String?              @unique
  facebookAccessToken  String?        
  apiKey String? @unique
}
model keyTokens {
  id   String @id @default(uuid())
  userId  String @unique
  publicKey String
  privateKey String
  refreshTokenUsed String[]
  refreshToken String 
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user         users    @relation(fields: [userId], references: [id])
}


model role {
  id   String @id
  name Role
}

model template {
  id String @default(uuid()) @id
  name String @db.VarChar()
  status String @default("active")
  tem_html String
  
}

model userRole {
  id     Int    @id @default(autoincrement())
  userId String
}

model review {
  id           String @id
  reviewerId   String
  clubId       String
  content      String @db.VarChar
  parentId     String
  commentLeft  String @db.VarChar
  commentRight String @db.VarChar
  club         club   @relation(fields: [clubId], references: [id])
  user         users   @relation(fields: [reviewerId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model cancellation {
  id             String  @id
  canceledSlotId String?
  cancelerId     String
  user           users    @relation(fields: [cancelerId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model bookedSlot {
  id        String   @id
  bookingId String
  date      DateTime
  slotId    String
  checkedIn String
  slot      slot     @relation(fields: [slotId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model booking {
  id     String   @id
  userId String
  billId String
  date   DateTime
  status Boolean
  user   users     @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model bill {
  id     String   @id
  method String
  total  Float
  date   DateTime
  type   String   @db.VarChar
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model club {
  id                 String               @id @default(uuid())
  courtOwnerId       String
  name               String               @db.VarChar
  address            String               @db.VarChar
  district           String               @db.VarChar
  cityOfProvince     String               @db.VarChar
  logoUrl            String?              @db.VarChar
  description        String?              @db.VarChar
  user               users                 @relation(fields: [courtOwnerId], references: [id])
  apiKey String @unique @default(uuid())
  clubImage          clubImage[]
  court              court[]
  pricing            pricing[]
  review             review[]
  slot               slot[]
  subscriptionOption subscriptionOption[]
  subOptionMonth    subOptionMonth?
  subOptionTime     subOptionTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model pricing {
  id       String @id
  clubId   String
  type     String @db.VarChar
  duration String @db.VarChar
  price    Float
  club     club   @relation(fields: [clubId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model clubImage {
  id     String @id
  clubId String
  name   String @db.VarChar
  url    String @db.VarChar
  club   club   @relation(fields: [clubId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model court {
  id         String   @id @default(uuid())
  clubId     String
  status     CourtStatus @default(active)
  number Int
  club       club     @relation(fields: [clubId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model subscriptionOption {
  id                 String                   @id 
  clubId             String
  name               String                   @db.VarChar
  price              Float
  startDate          DateTime
  endDate            DateTime
  type               SubscriptionType
  status             SubscriptionOptionStatus
  detail             Json
  memberSubscription memberSubscription[]
  club               club                     @relation(fields: [clubId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model subOptionSlot {
  id                 String             @id
  slotId             String
  slot               slot               @relation(fields: [slotId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model subOptionMonth {
  id                 String             @id @default(uuid())
  clubId      String @unique
  club club @relation(fields: [clubId], references: [id])
  usesPerDay Int
  playTime Int
  usesHistory DateTime[] @default([])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
}

model subOptionTime {
  id                 String             @id @default(uuid())
  clubId      String @unique
  club club @relation(fields: [clubId], references: [id])
  totalTime Int
  timeRemain Int @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model slot {
  id            String          @id
  clubId        String
  startTime     DateTime
  endTime       DateTime
  dateOfWeek    DateTime
  bookedSlot    bookedSlot[]
  club          club            @relation(fields: [clubId], references: [id])
  subOptionSlot subOptionSlot[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model memberSubscription {
  id                 String             @id
  subscriptionId     String
  memberId           String
  billId             String
  user               users               @relation(fields: [memberId], references: [id])
  subscriptionOption subscriptionOption @relation(fields: [subscriptionId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
enum SubscriptionType {
  Month
  Slot
  Time
}
enum Sex {
  female
  male
  other
}

enum Role {
  owner
  admin
  staff
  member
}

enum SubscriptionOptionStatus {
  active
  block
  
}

enum OtpStatus {
  pending
  active
  block
}

enum UserStatus {
  active
  disable
  block
}

enum CourtStatus {
  active
  repair
  booked
}